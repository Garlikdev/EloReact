// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  lastName       String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  active         Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  verificationToken VerificationToken[]
  role              Role                @default(USER)
  shipping          Shipping[]
  accounts          Account[]
  sessions          Session[]
}

model VerificationToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       String    @unique
  activatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?  @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@unique([id, token])
}

model Shipping {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  line1     String
  line2     String
  postCode  String
  city      String
}

enum Role {
  USER
  ADMIN
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Int             @default(0)
  discountPrice Int             @default(0)
  color         Colors[]
  colorsID      String[]        @db.ObjectId
  categoryID    String          @db.ObjectId
  category      ProductCategory @relation(fields: [categoryID], references: [id])
  stock         String?         @default("0")
  slug          String          @unique
  availability  String?         @default("Dostępny na zamówienie")
  timeToDeliver Int?            @default(3)
  description   String?
  weight        String?         @default("20")
  active        Boolean?        @default(true)
  images        Images[]        @relation(fields: [imagesID], references: [id])
  imagesID      String[]        @db.ObjectId
  variants      Variants[]
  variantsID    String[]        @db.ObjectId
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Colors {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Variants {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Int      @default(15)
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Images {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  path      String?
  product   Product[] @relation(fields: [productId], references: [id])
  productId String[]  @db.ObjectId
}

model ProductCategory {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  image   String?
  slug    String    @unique
  product Product[]
}
